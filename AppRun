#!/bin/bash

HERE="$(dirname "$(readlink -f "${0}")")"

progName="foobar2000"
progArch="-x86_64"
progVer=
progRealPath="$HERE/usr/share/$progName"
progHome="$HOME/.$progName"
progBin="$progName.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"

# Symlink stuff
mkdir -p "$progHome" || exit 1
# Delete broken symlinks
find -L "$progHome" -maxdepth 2 -type l -delete
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" 2> /dev/null

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$HERE"/usr/share/icons "$HOME"/.local/share
mkdir -p "$HOME/.local/share/applications"
DesktopFilePath="$HOME/.local/share/applications/$progName.desktop"

{ 
echo "[Desktop Entry]
Type=Application
Name=$progName
GenericName=Audio player
Comment=Simple and powerful audio player.
Actions=PlayPause;Stop;Next;Prev;Random;Config
Encoding=UTF-8
Version=$progVer
Icon=$progName
TryExec=${OWD}/${progName}_${progVer}${progArch}.AppImage
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage %F
MimeType=audio/aac;audio/x-ape;audio/basic;audio/mp4;audio/mpeg;audio/mpegurl;audio/vorbis;audio/x-flac;audio/x-mp2;audio/x-mp3;audio/x-mpegurl;audio/x-ms-wma;audio/x-oggflac;audio/x-speex;audio/x-vorbis;audio/x-wav;audio/m3u;audio/x-aifc;audio/x-aiffc;audio/x-aiff;audio/x-musepack;audio/x-wavpack;x-content/audio-player;audio/x-matroska;audio/x-vorbis+ogg;
Categories=AudioVideo;Audio;Player;
Terminal=false
StartupWMClass=$progBin

[Desktop Action PlayPause]
Name=Play/Pause
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /playpause

[Desktop Action Stop]
Name=Stop
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /stop

[Desktop Action Next]
Name=Next
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /next

[Desktop Action Prev]
Name=Prev
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /prev

[Desktop Action Random]
Name=Random
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /rand

[Desktop Action Config]
Name=Preferences
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage /config"
} >> "$DesktopFilePath"

fi
}

# check for wine appimage
wine_file=$(find "$HOME"/Downloads "$HOME"/bin "$HOME"/.local/bin -type f \( -name '*.appimage' -o -name '*.AppImage' \) 2>/dev/null | grep -e "wine-stable" -e 'Wine-stable' | head -n 1)

if [[ -f $wine_file ]]; then

# Calling binary files from other AppImage having $ARGV0

export winecmd=$wine_file

function wine {
  $winecmd wine "$@"
}

function wineserver {
  $winecmd wineserver "$@"
}

function winetricks {
  $winecmd winetricks -q "$@"
}

else
echo "wine-stable appimage is missing can not run f2k"
echo ""
echo "Download wine-stable*.appimage from https://github.com/mmtrt/WINE_AppImage/releases"
echo ""
echo "Then"
echo ""
echo "chmod +x wine-stable*.AppImage"
echo ""
echo "Also make sure you have single copy of wine-stable appimage present these locations"
echo ""
echo "$HOME/Downloads ; $HOME/bin ; $HOME/.local/bin"
exit 1
fi

# Create custom $WINEPREFIX and add $WINEDLLOVERRIDES
export WINEPREFIX="${progHome}/.wine" WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG=fixme-all WINEARCH=win32

if [[ ! -d $WINEPREFIX ]]; then

# link ttf & ttc fonts from root to wineprefix
mkdir -p "$WINEPREFIX"/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" "$WINEPREFIX"/drive_c/windows/Fonts/ \; &>/dev/null

# Disabled auto installing wmp9 for wma wmv files support
# Due to AppImage philosophy not download anything when launching AppImage
# winetricks wmp9
fi

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it.
case "$1" in
  "install")
    dkico
    ;;
  "winetricks")
    winetricks "$2" "$3"
    ;;
  "msiexec"|"notepad"|"regedit"|"regsvr32"|"wineboot"|"winecfg"|"wineconsole"|"winedbg"|"winefile"|"winemine"|"winepath")
    wine "$1"
    ;;
  "/playpause"|"/stop"|"/next"|"/prev"|"/random"|"/config")
    wine "$progHome/$progBin" "$1"
    ;;
  *)
    wine "$progHome/$progBin" "${args[@]}" 2>/dev/null
    ;;
esac