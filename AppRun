#!/bin/bash

HERE="$(dirname "$(readlink -f "${0}")")"

progName="foobar2000"
progArch="-x86_64"
progVer=
progRealPath="$HERE/usr/share/$progName"
progHome="$HOME/.$progName"
progBin="$progName.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"
progUiFix="$progHome/configuration/foo_ui_std.dll.cfg"
progReg="/tmp/dlloverrides.reg"

# Symlink stuff
mkdir -p "$progHome" || exit 1
# Delete broken symlinks
find -L "$progHome" -maxdepth 2 -type l -delete
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" 2> /dev/null
# fix ui glitch
rm "$progUiFix" 2> /dev/null

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r $HERE/usr/share/icons ${HOME}/.local/share
mkdir -p "${HOME}/.local/share/applications"
DesktopFilePath="${HOME}/.local/share/applications/$progName.desktop"

echo "[Desktop Entry]" >$DesktopFilePath
echo "Type=Application" >>$DesktopFilePath
echo "Name=$progName" >>$DesktopFilePath
echo "GenericName=Audio player" >>$DesktopFilePath
echo "Comment=Simple and powerful audio player." >>$DesktopFilePath
echo "Actions=PlayPause;Stop;Next;Prev;Random;Config" >>$DesktopFilePath
echo "Encoding=UTF-8" >>$DesktopFilePath
echo "Version=$progVer" >>$DesktopFilePath
echo "Icon=$progName" >>$DesktopFilePath
echo "TryExec=${OWD}/${progName}_${progVer}${progArch}.AppImage" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage %F" >>$DesktopFilePath
echo "MimeType=audio/aac;audio/x-ape;audio/basic;audio/mp4;audio/mpeg;audio/mpegurl;audio/vorbis;audio/x-flac;audio/x-mp2;audio/x-mp3;audio/x-mpegurl;audio/x-ms-wma;audio/x-oggflac;audio/x-speex;audio/x-vorbis;audio/x-wav;audio/m3u;audio/x-aifc;audio/x-aiffc;audio/x-aiff;audio/x-musepack;audio/x-wavpack;x-content/audio-player;audio/x-matroska;audio/x-vorbis+ogg;" >>$DesktopFilePath
echo "Categories=AudioVideo;Audio;Player;" >>$DesktopFilePath
echo "Terminal=false" >>$DesktopFilePath
echo "StartupWMClass=$progBin" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action PlayPause]" >>$DesktopFilePath
echo "Name=Play/Pause" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -playpause" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action Stop]" >>$DesktopFilePath
echo "Name=Stop" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -stop" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action Next]" >>$DesktopFilePath
echo "Name=Next" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -next" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action Prev]" >>$DesktopFilePath
echo "Name=Prev" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -prev" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action Random]" >>$DesktopFilePath
echo "Name=Random" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -rand" >>$DesktopFilePath
echo "" >>$DesktopFilePath
echo "[Desktop Action Config]" >>$DesktopFilePath
echo "Name=Preferences" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage -config" >>$DesktopFilePath

fi
}

# check for wine appimage
checkwine=$(find $HOME/Downloads $HOME/bin $HOME/.local/bin -type f \( -name '*.appimage' -o -name '*.AppImage' \) 2>/dev/null | grep -e "wine-stable" -e 'Wine-stable' | head -n 1 | wc -l)

if [ $checkwine -eq 1 ]; then
export WINESERVER=$HERE/usr/bin/wineserver
export WINE=$HERE/usr/bin/wine
else
echo "wine-stable appimage is missing can not run f2k"
echo ""
echo "Download wine-stable*bionic.appimage from https://github.com/mmtrt/Wine_Appimage/releases"
echo ""
echo "Then"
echo ""
echo "chmod +x wine-stable*.AppImage"
echo ""
echo "Also make sure you have single copy of wine-stable appimage present these locations"
echo ""
echo "$HOME/Downloads ; $HOME/bin ; $HOME/.local/bin"
exit 1
fi

# Create custom $WINEPREFIX and add $WINEDLLOVERRIDES
export WINEPREFIX="${progHome}/.wine" WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG=fixme-all

if [ ! -d $WINEPREFIX ]; then

# link ttf & ttc fonts from root to wineprefix
mkdir -p $WINEPREFIX/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" $WINEPREFIX/drive_c/windows/Fonts/ \; &>/dev/null

# getting winetricks & cabextract
wget "https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks" -P /tmp && chmod +x /tmp/winetricks
wget "https://gist.github.com/mmtrt/578f4c0694fcfc968b2d9dcc90da4c0e/raw/777f92bca3ff02f37a88ebedd144fe04dd1c47ca/cabextract" -P /tmp  && chmod +x /tmp/cabextract

# adding cabextract winetricks env
export PATH=$PATH:/tmp

# running winetricks from tmp
/tmp/winetricks --unattended wmp9

# removing cache data
rm /tmp/{winetricks,cabextract}

cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00
[HKEY_CURRENT_USER\Software\Wine\DllOverrides]
"concrt140"="native"
"msvcp140"="native"
"msvcp140_1"="native"
"vccorlib140"="native"
"vcruntime140"="native"
EOF

$WINE regedit "$progReg"
sleep 1

rm "$progReg"
echo "disable" > "$WINEPREFIX/.update-timestamp"
fi

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

if [ "$1" == "winecfg" ] ; then
  $WINE "winecfg" 2>/dev/null
elif [ "$1" == "install" ]; then
  dkico
else
  $WINE "$progHome/$progBin" "${args[@]}" 2>/dev/null
fi
